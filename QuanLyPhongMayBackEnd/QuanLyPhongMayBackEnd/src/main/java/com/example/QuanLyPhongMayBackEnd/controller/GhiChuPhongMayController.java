package com.example.QuanLyPhongMayBackEnd.controller;

import com.example.QuanLyPhongMayBackEnd.entity.GhiChuPhongMay;
import com.example.QuanLyPhongMayBackEnd.entity.PhongMay;
import com.example.QuanLyPhongMayBackEnd.entity.TaiKhoan;
import com.example.QuanLyPhongMayBackEnd.service.GhiChuPhongMayService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.List;

@RestController
@CrossOrigin
public class GhiChuPhongMayController {

    @Autowired
    private GhiChuPhongMayService ghiChuPhongMayService;

    // API thêm ghi chú phòng máy
    @PostMapping("/LuuGhiChuPhongMay")
    public ResponseEntity<GhiChuPhongMay> luuGhiChuPhongMay( // Changed return type
                                                             // maGhiChu removed - it should be generated by DB
                                                             @RequestParam String noiDung,
                                                             @RequestParam Long maPhong, // ID of the related PhongMay
                                                             @RequestParam @DateTimeFormat(pattern = "yyyy-MM-dd HH:mm:ss") Date ngayBaoLoi, // Updated pattern
                                                             @RequestParam(required = false) @DateTimeFormat(pattern = "yyyy-MM-dd HH:mm:ss") Date ngaySua, // Optional
                                                             @RequestParam Long maTaiKhoanBaoLoi, // Changed from String to Long ID
                                                             @RequestParam(required = false) Long maTaiKhoanSuaLoi, // Optional, changed from String to Long ID
                                                             @RequestParam String token
    ) {

        try {
            // Create reference objects
            // Option 1: Using constructor (if PhongMay(Long id) exists)
            PhongMay phongMayRef = new PhongMay(maPhong);
            // Option 2: Using default constructor and setter (safer if ID constructor doesn't exist)
            // PhongMay phongMayRef = new PhongMay();
            // phongMayRef.setMaPhong(maPhong); // Assuming PhongMay has setMaPhong

            TaiKhoan taiKhoanBaoLoiRef = new TaiKhoan(maTaiKhoanBaoLoi);
            TaiKhoan taiKhoanSuaLoiRef = null;

            if (maTaiKhoanSuaLoi != null) {
                taiKhoanSuaLoiRef = new TaiKhoan(maTaiKhoanSuaLoi);
            }

            // Create the GhiChuPhongMay instance using default constructor and setters
            GhiChuPhongMay ghiChuPhongMay = new GhiChuPhongMay();
            // Do NOT set maGhiChuPM here
            ghiChuPhongMay.setNoiDung(noiDung);
            ghiChuPhongMay.setPhongMay(phongMayRef);        // Set reference object
            ghiChuPhongMay.setNgayBaoLoi(ngayBaoLoi);
            ghiChuPhongMay.setNgaySua(ngaySua);             // Set (can be null)
            ghiChuPhongMay.setTaiKhoanBaoLoi(taiKhoanBaoLoiRef); // Set reference object
            ghiChuPhongMay.setTaiKhoanSuaLoi(taiKhoanSuaLoiRef); // Set reference object (can be null)


            // Call the service to save
            GhiChuPhongMay savedGhiChu = ghiChuPhongMayService.luu(ghiChuPhongMay, token);

            return ResponseEntity.ok(savedGhiChu);

        } catch (Exception e) {
            // Log the exception
            // logger.error("Error saving GhiChuPhongMay: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().build(); // Or other appropriate error status
        }
    }

    // API lấy danh sách ghi chú phòng máy
    @GetMapping("/DSGhiChuPhongMay")
    public List<GhiChuPhongMay> layDSGhiChu(@RequestParam String token){
        return ghiChuPhongMayService.layDSGhiChu(token);
    }

    // API lấy danh sách ghi chú theo ngày sửa
    @GetMapping("/DSGhiChuPhongMayTheoNgaySua/{ngaySua}")
    public ResponseEntity<List<GhiChuPhongMay>> layDSGhiChuTheoNgaySua(
            @PathVariable @DateTimeFormat(pattern = "yyyy-MM-dd") Date ngaySua,
            @RequestParam String token) {
        List<GhiChuPhongMay> dsGhiChu = ghiChuPhongMayService.layDSGhiChuTheoNgaySua(ngaySua,token);
        return new ResponseEntity<>(dsGhiChu, HttpStatus.OK);
    }

    // API lấy danh sách ghi chú theo ngày báo lỗi
    @GetMapping("/DSGhiChuPhongMayTheoNgayBaoLoi/{ngayBaoLoi}")
    public ResponseEntity<List<GhiChuPhongMay>> layDSGhiChuTheoNgayBaoLoi(
            @PathVariable @DateTimeFormat(pattern = "yyyy-MM-dd") Date ngayBaoLoi,
            @RequestParam String token) {
        List<GhiChuPhongMay> dsGhiChu = ghiChuPhongMayService.layDSGhiChuTheoNgayBaoLoi(ngayBaoLoi,token);
        return new ResponseEntity<>(dsGhiChu, HttpStatus.OK);
    }

    // API lấy ghi chú theo mã ghi chú
    @GetMapping("/GhiChuPhongMay/{maGhiChu}")
    public GhiChuPhongMay layGhiChuTheoMa(@PathVariable Long maGhiChu, @RequestParam String token){
        return ghiChuPhongMayService.layGhiChuTheoMa(maGhiChu,token);
    }

    // API lấy danh sách ghi chú theo phòng máy
    @GetMapping("/DSGhiChuPhongMayTheoPhongMay/{maPhong}")
    public ResponseEntity<List<GhiChuPhongMay>> layDSGhiChuTheoPhongMay(
            @PathVariable Long maPhong, @RequestParam String token) {
        List<GhiChuPhongMay> dsGhiChu = ghiChuPhongMayService.layDSGhiChuTheoPhongMay(maPhong,token);

        if (dsGhiChu.isEmpty()) {
            return ResponseEntity.ok(new ArrayList<>());
        }

        return new ResponseEntity<>(dsGhiChu, HttpStatus.OK);
    }

    // API cập nhật ghi chú phòng máy
    @PutMapping("/CapNhatGhiChuPhongMay/{maGhiChu}")
    public ResponseEntity<GhiChuPhongMay> capNhatGhiChuPhongMay(
            @PathVariable Long maGhiChu,
            @RequestParam String noiDung,
            @RequestParam Long maPhong, // ID of the related PhongMay
            @RequestParam @DateTimeFormat(pattern = "yyyy-MM-dd HH:mm:ss") Date ngayBaoLoi, // Updated pattern
            @RequestParam(required = false) @DateTimeFormat(pattern = "yyyy-MM-dd HH:mm:ss") Date ngaySua, // Optional
            @RequestParam Long maTaiKhoanBaoLoi,    // Corrected parameter name, Long ID
            @RequestParam(required = false) Long maTaiKhoanSuaLoi, // Optional, Corrected parameter name, Long ID
            @RequestParam String token
    ) {
        try {
            // 1. Fetch the existing entity by ID
            // Assuming layGhiChuTheoMa doesn't need the token, or adjust if it does.
            // If layGhiChuTheoMa needs token, pass it: ghiChuPhongMayService.layGhiChuTheoMa(maGhiChu, token);
            GhiChuPhongMay existingGhiChu = ghiChuPhongMayService.layGhiChuTheoMa(maGhiChu, token); // Adjust if service needs token here

            // 2. Check if it exists
            if (existingGhiChu == null) {
                return ResponseEntity.notFound().build(); // Return 404 Not Found
            }

            // 3. Create reference objects for relationships
            PhongMay phongMayRef = new PhongMay(maPhong); // Assumes constructor PhongMay(Long id)
            TaiKhoan taiKhoanBaoLoiRef = new TaiKhoan(maTaiKhoanBaoLoi);
            TaiKhoan taiKhoanSuaLoiRef = null;
            if (maTaiKhoanSuaLoi != null) {
                taiKhoanSuaLoiRef = new TaiKhoan(maTaiKhoanSuaLoi);
            }

            // 4. Update the fields of the existing entity
            existingGhiChu.setNoiDung(noiDung);
            existingGhiChu.setPhongMay(phongMayRef);        // Set reference
            existingGhiChu.setNgayBaoLoi(ngayBaoLoi);
            existingGhiChu.setNgaySua(ngaySua);             // Set (can be null if optional)
            existingGhiChu.setTaiKhoanBaoLoi(taiKhoanBaoLoiRef); // Set reference
            existingGhiChu.setTaiKhoanSuaLoi(taiKhoanSuaLoiRef); // Set reference (can be null if optional)

            // 5. Call the service to save the updated entity
            GhiChuPhongMay updatedGhiChu = ghiChuPhongMayService.capNhat(existingGhiChu, token); // Pass token if service needs it

            return ResponseEntity.ok(updatedGhiChu); // Return 200 OK with updated entity

        } catch (Exception e) {
            // Log the exception
            // logger.error("Error updating GhiChuPhongMay with id {}: {}", maGhiChu, e.getMessage(), e);
            return ResponseEntity.internalServerError().build(); // Return 500 Internal Server Error
        }
    }

    // API xoá ghi chú phòng máy
    @DeleteMapping("/XoaGhiChuPhongMay/{maGhiChu}")
    public String xoa(@PathVariable Long maGhiChu, @RequestParam String token) {
        ghiChuPhongMayService.xoa(maGhiChu,token);
        return "Đã xoá ghi chú với mã " + maGhiChu;
    }

    // API lấy ghi chú gần nhất theo phòng máy
    @GetMapping("/GhiChuPhongMayGanNhatTheoPhongMay/{maPhong}")
    public ResponseEntity<GhiChuPhongMay> layGhiChuGanNhatTheoPhongMay(
            @PathVariable Long maPhong, @RequestParam String token) {
        List<GhiChuPhongMay> dsGhiChu = ghiChuPhongMayService.layDSGhiChuTheoPhongMay(maPhong,token);

        if (dsGhiChu.isEmpty()) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }

        // Tìm GhiChu có ngày báo lỗi gần nhất
        GhiChuPhongMay ghiChuGanNhat = dsGhiChu.stream()
                .max(Comparator.comparing(GhiChuPhongMay::getNgayBaoLoi))
                .orElse(null);

        return new ResponseEntity<>(ghiChuGanNhat, HttpStatus.OK);
    }
}
